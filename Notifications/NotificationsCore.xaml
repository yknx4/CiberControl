<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Model="clr-namespace:Notifications"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                      xmlns:controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"

        xmlns:Custom="http://metro.mahapps.com/winfx/xaml/shared" x:Class="Notifications.NotificationsCore"
        mc:Ignorable="d"

        Title="NotificationsCore" Height="530" Width="400" ShowActivated="False" AllowsTransparency="True" WindowStyle="None" ShowInTaskbar="False" Background="Transparent" Topmost="True" UseLayoutRounding="True">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/FlatButton.xaml" />
                <ResourceDictionary>
                    <converter:BoolToVisibilityConverter xmlns:converter="clr-namespace:Notifications" x:Key="BoolToVisibilityConverter" />
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
            <Storyboard x:Key="CollapseStoryboard">
                <DoubleAnimation From="0" To="510" Storyboard.TargetProperty="Height" Duration="0:0:1.2"  >
                	<DoubleAnimation.EasingFunction>
                		<BackEase EasingMode="EaseOut"/>
                	</DoubleAnimation.EasingFunction>
                </DoubleAnimation>
            </Storyboard>
            <Style x:Key="NotificationButton" TargetType="{x:Type Button}">
                <Style.BasedOn>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Background" Value="White" />
                        <Setter Property="Margin" Value="0,0,10,0" />
                        <Setter Property="Foreground" Value="#707070" />
                        <Setter Property="FontSize" Value="10" />
                        <Setter Property="FontFamily" Value="Roboto" />
                        <Setter Property="Padding" Value="3.3,1.15" />
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Margin="0">
                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter Property="Background" TargetName="Border" Value="#CDBEF7" />
                                            <Setter Property="Foreground" Value="#707070" />
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Foreground" Value="{DynamicResource GrayBrush2}" />
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="#EEEBF7" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Style.BasedOn>
            </Style>
            <DataTemplate x:Key="MessageTemplate" DataType="Model:Notification">

                <Grid x:Name="NotificationWindow" Tag="{Binding Id}" Background="Transparent" SizeChanged="NotificationWindowSizeChanged" Margin="4" Loaded="notificationCreated">
                    <Border x:Name="border" BorderThickness="0" CornerRadius="0" Margin="25,15" Background="White">
                        <Border.Effect>
                            <DropShadowEffect ShadowDepth="0" Opacity="0.8" BlurRadius="12" />
                        </Border.Effect>
                        <Grid Height="80" Width="340" Margin="6">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Image Grid.RowSpan="2" Source="{Binding ImageUrl}" Margin="4" Width="80" />
                            <TextBlock Grid.Column="1" Text="{Binding Title}"
        					FontWeight="SemiBold" FontSize="12"  VerticalAlignment="Center"  Margin="2,4,4,2" TextWrapping="Wrap" TextTrimming="CharacterEllipsis" FontFamily="/WPFGrowlNotification;component/Resources/#Roboto" />
                            <Button x:Name="CloseButton" Grid.Column="1" Width="auto" Height="auto" HorizontalAlignment="Right" Margin="0,0,12,0"  FontFamily="Marlett" BorderThickness="0">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="MinHeight" Value="25" />
                                        <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}" />
                                        <Setter Property="FontWeight" Value="SemiBold" />
                                        <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
                                        <Setter Property="BorderBrush" Value="{DynamicResource BlackBrush}" />
                                        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                                        <Setter Property="Padding" Value="5,6" />
                                        <Setter Property="BorderThickness" Value="0" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Grid>
                                                        <VisualStateManager.VisualStateGroups>
                                                            <VisualStateGroup x:Name="CommonStates">
                                                                <VisualState x:Name="Normal" />
                                                                <VisualState x:Name="MouseOver">
                                                                    <Storyboard>
                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverBorder">
                                                                            <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                                                        </DoubleAnimationUsingKeyFrames>
                                                                        <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="MouseOverBorder">
                                                                            <EasingThicknessKeyFrame KeyTime="0" Value="1" />
                                                                        </ThicknessAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </VisualState>
                                                                <VisualState x:Name="Pressed">
                                                                    <Storyboard>
                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedBorder">
                                                                            <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                                                        </DoubleAnimationUsingKeyFrames>
                                                                        <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="MouseOverBorder">
                                                                            <EasingThicknessKeyFrame KeyTime="0" Value="0" />
                                                                        </ThicknessAnimationUsingKeyFrames>
                                                                        <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="PressedBorder">
                                                                            <EasingThicknessKeyFrame KeyTime="0" Value="1" />
                                                                        </ThicknessAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </VisualState>
                                                                <VisualState x:Name="Disabled">
                                                                    <Storyboard>
                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
                                                                            <SplineDoubleKeyFrame KeyTime="0" Value="0.7" />
                                                                        </DoubleAnimationUsingKeyFrames>
                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                                                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                                                                        </DoubleAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </VisualState>
                                                            </VisualStateGroup>
                                                            <VisualStateGroup x:Name="FocusStates">
                                                                <VisualState x:Name="Focused" />
                                                                <VisualState x:Name="Unfocused" />
                                                            </VisualStateGroup>
                                                            <VisualStateGroup x:Name="ValidationStates">
                                                                <VisualState x:Name="Valid" />
                                                                <VisualState x:Name="InvalidFocused" />
                                                                <VisualState x:Name="InvalidUnfocused" />
                                                            </VisualStateGroup>
                                                        </VisualStateManager.VisualStateGroups>
                                                        <Border x:Name="Background" BorderBrush="{DynamicResource BlackBrush}" BorderThickness="0" Background="{TemplateBinding Background}" />
                                                        <!--<Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0" />-->
                                                        <Ellipse x:Name="DisabledVisualElement" Fill="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0"  Width="20" Height="20"></Ellipse>
                                                        <Border x:Name="MouseOverBorder" Background="{DynamicResource GrayBrush8}" Opacity="0" Width="20" Height="20" />
                                                        <Border x:Name="PressedBorder" BorderBrush="{DynamicResource BlackBrush}" Background="{DynamicResource BlackBrush}" Opacity="0" Width="20" Height="20" />
                                                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content, Converter={Custom:ToLowerConverter}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" OpacityMask="{x:Null}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Button.Style>
                                <TextBlock Text="r" FontFamily="Marlett" FontSize="9" />
                            </Button>
                            <StackPanel Grid.Row="1" Grid.Column="1">
                                <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding Message}"   Foreground="Black"
        					FontFamily="/WPFGrowlNotification;component/Resources/#Roboto" VerticalAlignment="Center"  Margin="2,2,4,4" TextWrapping="Wrap" TextTrimming="CharacterEllipsis" />
                                <StackPanel Orientation="Horizontal" x:Name="Botones" Tag="{Binding Id}" Visibility="{Binding Path=HasOptions, Converter={StaticResource BoolToVisibilityConverter }}" >
                                    <Button Content="30 Minutos"  Style="{DynamicResource NotificationButton}" Tag="30" Click="handleNotificationClick"></Button>
                                    <Button Content="1 Hora"  Style="{DynamicResource NotificationButton}" Tag="60" Click="handleNotificationClick"></Button>
                                    <Button Content="Ninguno"  Style="{DynamicResource NotificationButton}" Tag="0" Click="handleNotificationClick"></Button>
                                </StackPanel>
                            </StackPanel>
                        </Grid>
                    </Border>
                </Grid>
                <DataTemplate.Triggers>
                    <EventTrigger RoutedEvent="FrameworkElement.Loaded" SourceName="NotificationWindow">
                        <BeginStoryboard x:Name="FadeInStoryBoard">
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="NotificationWindow" From="0.00" To="1" Storyboard.TargetProperty="Opacity" Duration="0:0:1" />
                                <DoubleAnimation Storyboard.TargetName="NotificationWindow" From="1" To="0" Storyboard.TargetProperty="Opacity" Duration="0:0:1" BeginTime="0:0:3" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <SeekStoryboard Offset="0:0:1" BeginStoryboardName="FadeInStoryBoard" />
                            <PauseStoryboard BeginStoryboardName="FadeInStoryBoard" />
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <SeekStoryboard Offset="0:0:2" BeginStoryboardName="FadeInStoryBoard" />
                            <ResumeStoryboard BeginStoryboardName="FadeInStoryBoard" />
                        </Trigger.ExitActions>
                    </Trigger>
                    <EventTrigger RoutedEvent="ButtonBase.Click" SourceName="CloseButton">
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="NotificationWindow" From="1" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Duration="0:0:0" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                    <EventTrigger RoutedEvent="ButtonBase.Click" x:Name="closeNotificationEvent">
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="NotificationWindow" From="1" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Duration="0:0:0" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                    <Trigger SourceName="NotificationWindow" Property="Opacity" Value="0">
                        <Trigger.EnterActions>
                            <BeginStoryboard Storyboard="{StaticResource CollapseStoryboard}" />
                        </Trigger.EnterActions>
                        <Setter TargetName="NotificationWindow" Property="Visibility" Value="Hidden" />
                    </Trigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </ResourceDictionary>
    </Window.Resources>

    <ItemsControl x:Name="NotificationsControl" FocusVisualStyle="{x:Null}" d:DataContext="{d:DesignData Source=DesignTimeNotificationData.xaml}" ItemsSource="{Binding .}" ItemTemplate="{StaticResource MessageTemplate}" Background="Transparent" >
		
    

	</ItemsControl>
</Window>